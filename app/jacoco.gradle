apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.2"
    reportsDir = file("$buildDir/reports")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

// Excluded files
def fileFilter = ['**/R.class',
                  '**/R$*.class',
                  '**/*BR*.*',
                  '**/BuildConfig.*',
                  '**/Manifest*.*',
                  '**/*Test*.*',
                  'android/**/*.*',
                  '**/SingleLiveEvent*',
                  '**/CustomTypefaceSpan*',
                  '**/*Fragment*',
                  '**/*Adapter*',
                  '**/*Application*',
                  '**/model/*.*',
                  '**/room/*.*',
                  '**/di/*.*',
                  '**/reminders/*.*',
                  '**/backups/*.*',
                  '**/*Binding*.*',
                  '**/*adapter*.*',
                  '**/*Activity*.*',
                  '**/calendar/*.*',]

task testCoverage(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Create jacoco coverage reports for the Debug build"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    classDirectories = fileTree(
            dir: "$buildDir/intermediates/classes", //TODO check this one
            excludes: fileFilter
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: fileFilter
    )

    sourceDirectories = files([
            android.sourceSets.main.java.srcDirs
    ])

    executionData = files("$buildDir/jacoco/testDebugUnitTest.exec")

    doLast {
        printReport("testCoverage")
    }
}

def printReport(task) {
    def report = file("$buildDir/reports/${task}/${task}.xml")
    logger.lifecycle("Checking reports from ${report}")

    def parser = new XmlParser()
    parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
    parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
    def results = parser.parse(report)

    def percentage = {
        if (it == null) {
            100
        } else {
            def covered = it.'@covered' as Double
            def missed = it.'@missed' as Double
            (covered / (covered + missed) * 100).round(2)
        }
    }

    def counters = results.counter
    def metrics = [:]
    metrics << [
            'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
            'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
            'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
            'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
            'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
    ]

    def failures = []
    def passes = []

    // Fail the task if the coverage is below these numbers
    def minTestCoverage = [
            'instruction': 60,
            'line'       : 80,
            'complexity' : 60,
            'method'     : 80,
            'class'      : 80
    ]

    metrics.each {
        def limit = minTestCoverage[it.key]
        if (it.value < limit) {
            failures.add("- ${it.key} coverage rate is ${it.value}%, the minimum is ${limit}")
        } else {
            passes.add("- ${it.key} coverage rate is ${it.value}%")
        }
    }

    if (failures) {
        logger.quiet("\n\n CODE COVERAGE FAILED!!!")
        failures.forEach {
            logger.quiet(it)
        }
        throw new GradleException("Code coverage failed")
    } else {
        logger.quiet("\n\n Code coverage passed!")
        passes.each {
            logger.quiet(it)
        }
    }

}